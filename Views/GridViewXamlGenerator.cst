<%@ CodeTemplate Language="C#" TargetLanguage="C#" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="NameSpace" Type="System.String" Category="Context" Description="nothing" %>
<%@ Property Name="Asembly" Type="System.String" Category="Context" Description="nothing" %>
<%@ Property Name="ProjectKeyName" Type="System.String" Category="Context" Description="nothing" %>
<%@ Property Name="ProjectName" Type="System.String" Category="Context" Description="nothing" %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>

<Page
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:local="clr-namespace:<%= ProjectName %>.ViewModels"
        xmlns:views="clr-namespace:<%= ProjectName %>.Views"
        xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors"
        xmlns:dxg="http://schemas.devexpress.com/winfx/2008/xaml/grid"
        xmlns:dxb="http://schemas.devexpress.com/winfx/2008/xaml/bars"
        xmlns:dxr="http://schemas.devexpress.com/winfx/2008/xaml/ribbon"
        xmlns:dxlc="http://schemas.devexpress.com/winfx/2008/xaml/layoutcontrol"
        xmlns:dxmvvm="http://schemas.devexpress.com/winfx/2008/xaml/mvvm"
        xmlns:dx="http://schemas.devexpress.com/winfx/2008/xaml/core"
        xmlns:dxdo="http://schemas.devexpress.com/winfx/2008/xaml/docking"
        x:Class="<%= NameSpace %>.Grid<%= GetClassName(SourceTable) %>sModule"
        mc:Ignorable="d" d:DesignHeight="643" d:DesignWidth="1101" FlowDirection="RightToLeft" 
         DataContext="{dxmvvm:ViewModelSource Type=local:Grid<%= GetClassName(SourceTable) %>sModuleViewModel}">

    <Page.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="GridTemplates.xaml" />
            </ResourceDictionary.MergedDictionaries>
            <local:ItemTypeToBooleanConverter x:Key="itemTypeToBooleanConverter"/>

            <dxg:TableView x:Key="view" ShowSearchPanelMode="Always" AllowPerPixelScrolling="True" ShowGroupPanel="False" AutoWidth="True" AllowConditionalFormattingMenu="True">
                <dxg:TableView.FormatConditions>
                    <dxg:FormatCondition Expression="[ID]" PredefinedFormatName="BoldText"/>
                </dxg:TableView.FormatConditions>
                <dxmvvm:Interaction.Triggers>
                    <dxmvvm:EventToCommand EventName="RowDoubleClick" Command="{Binding ShowEdit<%= GetClassName(SourceTable) %>WindowCommand}"/>
                </dxmvvm:Interaction.Triggers>
            </dxg:TableView>
            <Style x:Key="gridControlMVVMStyle" TargetType="{x:Type dxg:GridControl}">
                <Setter Property="ItemsSource" Value="{Binding ItemsSource}"/>
                <Setter Property="ColumnsSource" Value="{Binding Columns}"/>
                <Setter Property="AutoExpandAllGroups" Value="True"/>
                <Setter Property="SelectedItem" Value="{Binding SelectedItem, Mode=TwoWay}"/>
                <Setter Property="FilterString" Value="{Binding FilterString, Mode=TwoWay}"/>
            </Style>
            <dxg:GridControl x:Key="printGridControl" ColumnGeneratorStyle="{StaticResource columnGeneratorStyle}">
                <dxg:GridControl.View>
                    <dxg:TableView AutoWidth="True"/>
                </dxg:GridControl.View>
                <dxg:GridControl.GroupSummary>
                    <dxg:GridSummaryItem SummaryType="Count"/>
                </dxg:GridControl.GroupSummary>
            </dxg:GridControl>
        </ResourceDictionary>
    </Page.Resources>
    <dxmvvm:Interaction.Behaviors>
        <dxmvvm:NotificationService UseWin8NotificationsIfAvailable="False"
                                PredefinedNotificationTemplate="ShortHeaderAndLongText"/>
    </dxmvvm:Interaction.Behaviors>
    <Grid>
        <dxb:BarManager CreateStandardLayout="False">
            <dxb:BarManager.Items>
                <dxb:BarButtonItem x:Name="mew<%= GetClassName(SourceTable) %>" Content="جدید" Command="{Binding ShowNew<%= GetClassName(SourceTable) %>WindowCommand}" LargeGlyph="{dx:DXImage Image=AddItem_32x32.png}" />
                <dxb:BarButtonItem x:Name="edit<%= GetClassName(SourceTable) %>" Content="ویرایش" Command="{Binding ShowEdit<%= GetClassName(SourceTable) %>WindowCommand}" IsEnabled="{Binding SelectedItem, Converter={StaticResource ObjectToBooleanConverter}}" LargeGlyph="{dx:DXImage Image=Edit_32x32.png}"/>
                <dxb:BarButtonItem x:Name="delete<%= GetClassName(SourceTable) %>" Content="حذف" Command="{Binding Delete<%= GetClassName(SourceTable) %>Command}" IsEnabled="{Binding SelectedItem, Converter={StaticResource ObjectToBooleanConverter}}" LargeGlyph="{dx:DXImage Image=DeleteList_32x32.png}"/>


                <dxb:BarCheckItem x:Name="ListItem" IsChecked="{Binding CheckedItemType, Converter={StaticResource itemTypeToBooleanConverter}, ConverterParameter={x:Static local:ItemType.All}}" Content="همه"  Command="{Binding SetListViewCommand}" LargeGlyph="{dx:DXImage Image=Pivot_32x32.png}"/>


                <dxb:BarButtonItem x:Name="Print" Content="پیش نمایش چاپ" Command="{Binding PrintCommand}" LargeGlyph="{dx:DXImage Image=Print_32x32.png}"/>
                <dxb:BarStaticItem x:Name="summaryCount" Content="{Binding Count, ElementName=customSummaryProvider, Converter={StaticResource IntToItemsConverter}}"/>
            </dxb:BarManager.Items>
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                </Grid.RowDefinitions>
                <dxr:RibbonControl DockPanel.Dock="Top" RibbonStyle="Office2010">
                    <dxr:RibbonDefaultPageCategory Caption="defaultCategory">
                        <dxr:RibbonPage Caption="آیتم ها" MergeOrder="0">
                            <dxr:RibbonPageGroup Caption="عملیات">
                                <dxb:BarButtonItemLink BarItemName="mew<%= GetClassName(SourceTable) %>"/>
                                <dxb:BarButtonItemLink BarItemName="edit<%= GetClassName(SourceTable) %>"/>
                                <dxb:BarItemLinkSeparator/>
                                <dxb:BarButtonItemLink BarItemName="delete<%= GetClassName(SourceTable) %>"/>
                            </dxr:RibbonPageGroup>
                            <dxr:RibbonPageGroup Caption="نوع آیتم" ShowCaptionButton="False">
                            </dxr:RibbonPageGroup>
                            <dxr:RibbonPageGroup Caption="نمایش">
                                <dxb:BarItemLink BarItemName="ListItem"/>
                            </dxr:RibbonPageGroup>
                        </dxr:RibbonPage>
                        <dxr:RibbonPage Caption="نمایش" MergeOrder="1">
                            <dxr:RibbonPageGroup Caption="Print">
                                <dxb:BarButtonItemLink BarItemName="Print"/>
                            </dxr:RibbonPageGroup>
                        </dxr:RibbonPage>
                    </dxr:RibbonDefaultPageCategory>
                </dxr:RibbonControl>
                <dxdo:DockLayoutManager Grid.Row="1">
                    <dxdo:LayoutGroup Margin="1">
                        <dxdo:LayoutPanel AllowClose="False" AllowFloat="False" AllowHide="False" ShowCaption="False" ShowBorder="False" ShowCloseButton="False">
                            <Grid>
                                <dxg:GridControl x:Name="grid" Grid.Row="1" Style="{StaticResource gridControlMVVMStyle}" View="{StaticResource view}" ColumnGeneratorStyle="{StaticResource columnGeneratorStyle}">
                                    <dxmvvm:Interaction.Behaviors>
                                        <views:GridControlColumnsUpdateLocker/>
                                        <views:GridControlPrint/>
                                        <views:StatusBarSummaryUpdate x:Name="customSummaryProvider"/>
                                    </dxmvvm:Interaction.Behaviors>
                                    <dxg:GridControl.GroupSummary>
                                        <dxg:GridSummaryItem SummaryType="Count"/>
                                    </dxg:GridControl.GroupSummary>
                                    <dxg:GridControl.TotalSummary>
                                        <dxg:GridSummaryItem SummaryType="Count"/>
                                        <dxg:GridSummaryItem SummaryType="Custom"/>
                                    </dxg:GridControl.TotalSummary>
                                </dxg:GridControl>
                            </Grid>
                        </dxdo:LayoutPanel>
                    </dxdo:LayoutGroup>
                </dxdo:DockLayoutManager>
                <dxr:RibbonStatusBarControl>
                    <dxr:RibbonStatusBarControl.LeftItemLinks>
                        <dxb:BarStaticItemLink BarItemName="summaryCount"/>
                        <dxb:BarItemLinkSeparator/>
                    </dxr:RibbonStatusBarControl.LeftItemLinks>
                </dxr:RibbonStatusBarControl>
            </Grid>
        </dxb:BarManager>
    </Grid>
</Page>
	
<script runat="template">
public string GetMemberVariableDeclarationStatement(ColumnSchema column)
{
	return GetMemberVariableDeclarationStatement("protected", column);
}

public string GetMemberVariableDeclarationStatement(string protectionLevel, ColumnSchema column)
{
	string statement = protectionLevel + " ";
	statement += GetCSharpVariableType(column) + " " + GetMemberVariableName(column);
	
	string defaultValue = GetMemberVariableDefaultValue(column);
	if (defaultValue != "")
	{
		statement += " = " + defaultValue;
	}
	else if(SourceTable.ForeignKeyColumns.IndexOf(column) > -1 && GetCSharpVariableType(column)=="int")
	{
		statement += " = -1";
	}
	
	statement += ";";
	
	return statement;
}

public string MyGetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(reader.GetOrdinal(\"" + column.Name + "\"))) ";
	statement += "value."+GetPropertyName(column) + " = ";
	
	//if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
	statement += "reader." + GetReaderMethod(column) + "(reader.GetOrdinal(\"" + column.Name + "\"));";
	
//	if(SourceTable.ForeignKeyColumns.IndexOf(column) > -1 && GetCSharpVariableType(column) == "int")
//		statement += "  else value."+GetPropertyName(column) + " = -1;";
	
	return statement;
}

public string GetReaderAssignmentStatement(ColumnSchema column, int index)
{
	string statement = "if (!reader.IsDBNull(" + index.ToString() + ")) ";
	statement += GetMemberVariableName(column) + " = ";
	
	if (column.Name.EndsWith("TypeCode")) statement += "(" + column.Name + ")";
	
	statement += "reader." + GetReaderMethod(column) + "(" + index.ToString() + ");";
	
	return statement;
}

public string GetCamelCaseName(string value)
{
	return value.Substring(0, 1).ToLower() + value.Substring(1);
}

public string GetMemberVariableName(ColumnSchema column)
{
	string propertyName = GetPropertyName(column);
	string memberVariableName = "_" + GetCamelCaseName(propertyName);
	
	return memberVariableName;
}

public string GetPropertyName(ColumnSchema column)
{
	string propertyName = column.Name;
	
	//if (propertyName == column.Table.Name + "Name") return "Name";
	//if (propertyName == column.Table.Name + "Description") return "Description";
	
	//if (propertyName.EndsWith("TypeCode")) propertyName = propertyName.Substring(0, propertyName.Length - 4);
	
	return propertyName;
}
		
public string GetMemberVariableDefaultValue(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Guid:
		{
			return "Guid.Empty";
		}
		case DbType.AnsiString:
		case DbType.AnsiStringFixedLength:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "String.Empty";
		}
		default:
		{
			return "";
		}
	}
}

public string GetCSharpVariableType(ColumnSchema column)
{
	if (column.Name.EndsWith("TypeCode")) return column.Name;
	
	switch (column.DataType)
	{
		case DbType.AnsiString: return "string";
		case DbType.AnsiStringFixedLength: return "string";
		case DbType.Binary: return "byte[]";
		case DbType.Boolean: return "bool";
		case DbType.Byte: return "byte";
		case DbType.Currency: return "decimal";
		case DbType.Date: return "DateTime";
		case DbType.DateTime: return "DateTime";
		case DbType.Decimal: return "decimal";
		case DbType.Double: return "double";
		case DbType.Guid: return "Guid";
		case DbType.Int16: return "short";
		case DbType.Int32: return "int";
		case DbType.Int64: return "long";
		case DbType.Object: return "object";
		case DbType.SByte: return "sbyte";
		case DbType.Single: return "float";
		case DbType.String: return "string";
		case DbType.StringFixedLength: return "string";
		case DbType.Time: return "TimeSpan";
		case DbType.UInt16: return "ushort";
		case DbType.UInt32: return "uint";
		case DbType.UInt64: return "ulong";
		case DbType.VarNumeric: return "decimal";
		default:
		{
			return "__UNKNOWN__" + column.NativeType;
		}
	}
}

public string GetReaderMethod(ColumnSchema column)
{
	switch (column.DataType)
	{
		case DbType.Byte:
		{
			return "GetByte";
		}
		case DbType.Int16:
		{
			return "GetInt16";
		}
		case DbType.Int32:
		{
			return "GetInt32";
		}
		case DbType.Int64:
		{
			return "GetInt64";
		}
		case DbType.AnsiStringFixedLength:
		case DbType.AnsiString:
		case DbType.String:
		case DbType.StringFixedLength:
		{
			return "GetString";
		}
		case DbType.Boolean:
		{
			return "GetBoolean";
		}
		case DbType.Guid:
		{
			return "GetGuid";
		}
		case DbType.Currency:
		case DbType.Decimal:
		{
			return "GetDecimal";
		}
		case DbType.DateTime:
		case DbType.Date:
		{
			return "GetDateTime";
		}
		case DbType.Binary:
		{
			return "GetBytes";
		}
		case DbType.Double:
		{
			return "GetDouble";
		}
		default:
		{
			return "__SQL__" + column.DataType;
		}
	}
}

public string GetClassName(TableSchema table)
{
	string name = "";
	if (table.Name.EndsWith("s"))
	{
		name= table.Name.Substring(0, table.Name.Length - 1);
	}
	else if (table.Name.EndsWith("ies"))
	{
		name= table.Name.Substring(0, table.Name.Length - 3)+"y";
	}
	else
	{
		name= table.Name;
	}
	if(name.StartsWith("PC_"))
		name= name.Substring(3,name.Length-3);
	return name;	
}

public string GetSqlDbType(ColumnSchema column)
{
	switch (column.NativeType)
	{
		case "bigint": return "BigInt";
		case "binary": return "Binary";
		case "bit": return "Bit";
		case "char": return "Char";
		case "datetime": return "DateTime";
		case "decimal": return "Decimal";
		case "float": return "Float";
		case "image": return "Image";
		case "int": return "Int";
		case "money": return "Money";
		case "nchar": return "NChar";
		case "ntext": return "NText";
		case "numeric": return "Decimal";
		case "nvarchar": return "NVarChar";
		case "real": return "Real";
		case "smalldatetime": return "SmallDateTime";
		case "smallint": return "SmallInt";
		case "smallmoney": return "SmallMoney";
		case "sql_variant": return "Variant";
		case "sysname": return "NChar";
		case "text": return "Text";
		case "timestamp": return "Timestamp";
		case "tinyint": return "TinyInt";
		case "uniqueidentifier": return "UniqueIdentifier";
		case "varbinary": return "VarBinary";
		case "varchar": return "VarChar";
		default: return "__UNKNOWN__" + column.NativeType;
	}
}

public string GetPrimaryKeyType(TableSchema table)
{
	if (table.PrimaryKey != null)
	{
		if (table.PrimaryKey.MemberColumns.Count == 1)
		{
			return GetCSharpVariableType(table.PrimaryKey.MemberColumns[0]);
		}
		else
		{
			throw new ApplicationException("This template will not work on primary keys with more than one member column.");
		}
	}
	else
	{
		throw new ApplicationException("This template will only work on tables with a primary key.");
	}
}

public override string GetFileName()
{
	return this.GetClassName(this.SourceTable) + ".cs";
}
</script>